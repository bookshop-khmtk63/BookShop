import React, { useState } from "react";
import { FaEye, FaEyeSlash } from "react-icons/fa";
import { useNavigate } from "react-router-dom";
import { useAuth } from "../../Context/Context";
import "./AuthPassword.css";
import logo from "../../assets/logo.png";

export default function AuthPassword() {
  const { token } = useAuth();
  const API_URL = import.meta.env.VITE_API_URL;
  const navigate = useNavigate();

  const [step, setStep] = useState(1);
  const [email, setEmail] = useState("");
  const [otp, setOtp] = useState("");
  const [resetToken, setResetToken] = useState("");
  const [password, setPassword] = useState("");
  const [confirmPassword, setConfirmPassword] = useState("");
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);
  const [loading, setLoading] = useState(false);
  const [message, setMessage] = useState("");

  // G·ª≠i OTP
  const handleSendOtp = async () => {
    if (!email) {
      setMessage("Vui l√≤ng nh·∫≠p email");
      return;
    }
    setLoading(true);
    setMessage("");
    
    try {
      const res = await fetch(`${API_URL}/api/auth/forgot-password`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ email }),
      });

      const data = await res.json();
      console.log("üìß Send OTP response:", data);

      if (!res.ok) {
        throw new Error(data.message || "G·ª≠i OTP th·∫•t b·∫°i");
      }

      setMessage("‚úÖ OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i, vui l√≤ng ki·ªÉm tra email!");
    } catch (err) {
      console.error("‚ùå Send OTP error:", err);
      setMessage(err.message);
    } finally {
      setLoading(false);
    }
  };

  // Verify OTP
  const handleVerifyOtp = async (e) => {
    e.preventDefault();

    if (!otp.trim()) {
      setMessage("Vui l√≤ng nh·∫≠p OTP");
      return;
    }

    setLoading(true);
    setMessage("");

    try {
      const res = await fetch(`${API_URL}/api/auth/verify-otp`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ email, otp }),
      });

      const data = await res.json();
      console.log("üîê Verify OTP response:", data);

      if (!res.ok) {
        throw new Error(data.message || "OTP kh√¥ng h·ª£p l·ªá");
      }

      // L·∫•y reset token - th·ª≠ nhi·ªÅu format
      const tokenFromApi = 
        data.data?.reset_token || 
        data.data?.resetToken || 
        data.reset_token || 
        data.resetToken ||
        "";

      console.log("üé´ Reset token:", tokenFromApi);

      if (!tokenFromApi) {
        console.error("‚ùå Full response:", JSON.stringify(data, null, 2));
        throw new Error("Kh√¥ng t√¨m th·∫•y reset token trong ph·∫£n h·ªìi API");
      }

      // L∆∞u reset token
      setResetToken(tokenFromApi);
      localStorage.setItem("reset_token", tokenFromApi);
      
      setStep(3);
      setMessage("‚úÖ OTP h·ª£p l·ªá, vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u m·ªõi");
    } catch (err) {
      console.error("‚ùå Verify OTP error:", err);
      setMessage(err.message);
    } finally {
      setLoading(false);
    }
  };

  // Reset password
  const handleResetPassword = async (e) => {
    e.preventDefault();
    setMessage("");

    // Validate password
    if (!password || !confirmPassword) {
      setMessage("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß m·∫≠t kh·∫©u");
      return;
    }

    if (password !== confirmPassword) {
      setMessage("M·∫≠t kh·∫©u v√† x√°c nh·∫≠n m·∫≠t kh·∫©u kh√¥ng kh·ªõp");
      return;
    }

    if (password.length < 6) {
      setMessage("M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±");
      return;
    }

    setLoading(true);

    try {
      // L·∫•y reset token
      const token = resetToken || localStorage.getItem("reset_token");
      console.log("üé´ Reset token ƒëang d√πng:", token);

      if (!token) {
        throw new Error("Thi·∫øu reset token, vui l√≤ng th·ª≠ l·∫°i t·ª´ ƒë·∫ßu");
      }

      // Th·ª≠ nhi·ªÅu format payload kh√°c nhau
      const payloads = [
        // Format 1: resetoken (theo code c≈©)
        {
          resetoken: token,
          password,
          confirmPassword,
        },
        // Format 2: reset_token (snake_case)
        {
          reset_token: token,
          password,
          confirmPassword,
        },
        // Format 3: resetToken (camelCase)
        {
          resetToken: token,
          password,
          confirmPassword,
        },
        // Format 4: token field
        {
          token: token,
          password,
          confirmPassword,
        },
      ];

      let success = false;
      let lastError = null;

      // Th·ª≠ t·ª´ng format cho ƒë·∫øn khi th√†nh c√¥ng
      for (const payload of payloads) {
        console.log("üîÑ ƒêang th·ª≠ payload:", payload);

        try {
          const res = await fetch(`${API_URL}/api/auth/reset-password`, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(payload),
          });

          const data = await res.json();
          console.log("üì© Reset response:", data);

          if (res.ok) {
            success = true;
            setMessage("‚úÖ M·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c thay ƒë·ªïi th√†nh c√¥ng!");
            localStorage.removeItem("reset_token");
            setTimeout(() => navigate("/login"), 1500);
            break;
          } else {
            lastError = data.message || "ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u th·∫•t b·∫°i";
          }
        } catch (err) {
          lastError = err.message;
          continue;
        }
      }

      if (!success) {
        throw new Error(lastError || "Kh√¥ng th·ªÉ ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u");
      }

    } catch (err) {
      console.error("‚ùå Reset password error:", err);
      setMessage(err.message);
    } finally {
      setLoading(false);
    }
  };

  // Clear message khi chuy·ªÉn step
  const handleStepChange = (newStep) => {
    setStep(newStep);
    setMessage("");
  };

  return (
    <div className="auth-container">
      <div className="logo-section">
        <div className="logo-placeholder">
          <img src={logo} alt="Logo" />
        </div>
      </div>

      <div className="form-section">
        <div className="auth-box">
          <button className="back-login-btn" onClick={() => navigate("/login")}>
            ‚Üê Quay l·∫°i ƒëƒÉng nh·∫≠p
          </button>

          {step === 1 && (
            <>
              <h2>QU√äN M·∫¨T KH·∫®U</h2>
              <p className="subtitle">Nh·∫≠p email ƒë·ªÉ nh·∫≠n m√£ OTP</p>
              
              <form className="email-otp-form" onSubmit={handleVerifyOtp}>
                <div className="form-group">
                  <input
                    type="email"
                    placeholder="Nh·∫≠p email"
                    required
                    value={email}
                    onChange={(e) => setEmail(e.target.value)}
                  />
                </div>

                <div className="otp-row">
                  <input
                    type="text"
                    placeholder="Nh·∫≠p OTP"
                    value={otp}
                    onChange={(e) => setOtp(e.target.value)}
                    maxLength={6}
                  />
                  <button
                    type="button"
                    className="send-otp-btn"
                    onClick={handleSendOtp}
                    disabled={loading || !email}
                  >
                    {loading ? "ƒêang g·ª≠i..." : "G·ª≠i OTP"}
                  </button>
                </div>

                <button type="submit" className="submit-btn" disabled={loading || !otp}>
                  Ti·∫øp t·ª•c ‚Üí
                </button>
              </form>
            </>
          )}

          {step === 3 && (
            <>
              <h2>ƒê·∫∂T L·∫†I M·∫¨T KH·∫®U</h2>
              <p className="subtitle">Nh·∫≠p m·∫≠t kh·∫©u m·ªõi c·ªßa b·∫°n</p>
              
              <form onSubmit={handleResetPassword}>
                <div className="form-group">
                  <div className="password-field">
                    <input
                      type={showPassword ? "text" : "password"}
                      placeholder="M·∫≠t kh·∫©u m·ªõi (t·ªëi thi·ªÉu 6 k√Ω t·ª±)"
                      required
                      value={password}
                      onChange={(e) => setPassword(e.target.value)}
                    />
                    <span className="eye" onClick={() => setShowPassword(!showPassword)}>
                      {showPassword ? <FaEyeSlash /> : <FaEye />}
                    </span>
                  </div>
                </div>

                <div className="form-group">
                  <div className="password-field">
                    <input
                      type={showConfirmPassword ? "text" : "password"}
                      placeholder="Nh·∫≠p l·∫°i m·∫≠t kh·∫©u m·ªõi"
                      required
                      value={confirmPassword}
                      onChange={(e) => setConfirmPassword(e.target.value)}
                    />
                    <span
                      className="eye"
                      onClick={() => setShowConfirmPassword(!showConfirmPassword)}
                    >
                      {showConfirmPassword ? <FaEyeSlash /> : <FaEye />}
                    </span>
                  </div>
                </div>

                <button type="submit" className="submit-btn" disabled={loading}>
                  {loading ? "ƒêang ƒë·∫∑t l·∫°i..." : "ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u"}
                </button>
              </form>
            </>
          )}

          {message && (
            <p className={`message ${message.includes("‚úÖ") ? "success" : "error"}`}>
              {message}
            </p>
          )}
        </div>
      </div>
    </div>
  );
}